export GPG_TTY=$(tty)
gpg-connect-agent updatestartuptty /bye >/dev/null

setopt extended_glob
setopt histignorealldups

alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias e='$VISUAL'
alias h='history'
alias o='xdg-open'
alias sudo='doas --'

# udiskie
alias uma='udiskie-umount --all'

# Use exa instead of ls and tree
alias l='exa --icons --group-directories-first -F'
alias la='exa --icons --group-directories-first -aF'
alias ll='exa --icons --group-directories-first -l'
alias lla='exa --icons --group-directories-first -al'
alias tree='exa --icons -T'

# systemd
alias jc='journalctl -e'
alias sc='systemctl'

# Use emacs keybindings
bindkey -e

# Set key bindings
# Create a zkbd compatible hash; to add other keys to this hash, see: man 5 terminfo
typeset -g -A key

key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[Shift-Tab]="${terminfo[kcbt]}"

[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"       beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"        end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"     overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}"  backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"     delete-char
[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"         up-line-or-history
[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"       down-line-or-history
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"       backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"      forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"     beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"   end-of-buffer-or-history
[[ -n "${key[Shift-Tab]}" ]] && bindkey -- "${key[Shift-Tab]}"  reverse-menu-complete

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
	autoload -Uz add-zle-hook-widget
	function zle_application_mode_start { echoti smkx }
	function zle_application_mode_stop { echoti rmkx }
	add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
	add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

# Enable completions
autoload -Uz compinit && compinit
zstyle ':completion:*' menu select

# Enable aws completion
autoload -U bashcompinit && bashcompinit
complete -C aws_completer aws

# Enable kitty completions
hash kitty 2> /dev/null && kitty + complete setup zsh | source /dev/stdin

# Enable editor
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey '^X^E' edit-command-line

# Enable autosuggestions plugin
if [[ -f "/usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh" ]]; then
	source "/usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh"
	bindkey "^ "      autosuggest-execute # ctrl-space
	bindkey "^[[1;5D" backward-word       # ctrl-left
	bindkey "^[[1;5C" forward-word        # ctrl-right
fi

sourceIfExists() {
	[[ -f "$1" ]] && source "$1"
}

# Enable syntax-highlighting plugin
sourceIfExists "/usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"

# Enable fuzzy finder
sourceIfExists "/usr/share/fzf/key-bindings.zsh"
sourceIfExists "/usr/share/fzf/completion.zsh"

# Define lfcd command
sourceIfExists "$XDG_CONFIG_HOME/lf/lfcd.sh"

# Set lf icons
sourceIfExists "$XDG_CONFIG_HOME/lf/lficons.sh"

# Set starship prompt
hash starship 2> /dev/null && eval "$(starship init zsh)"

# Enable zoxide
hash zoxide 2> /dev/null && eval "$(zoxide init zsh)"

# vim: ft=bash
